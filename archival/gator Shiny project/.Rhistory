c(test_list, "puppes", "cats")
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
slider_lsit
slider_list
c(var_name, var_min, var_max, var_mean)
cbind(var_name, var_min, var_max, var_mean)
list(var_name, var_min, var_max, var_mean)
data.frame(var_name, var_min, var_max, var_mean)
shiny::runApp('prototype Shiny project')
slider_list
shiny::runApp('prototype Shiny project')
slider_list
shiny::runApp('prototype Shiny project')
slider_list
shiny::runApp('prototype Shiny project')
slider_set
shiny::runApp('prototype Shiny project')
help(sapply)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
slider_set
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
new_data
str(new_data)
help(transform)
transform(new_data["iq"] = 50)
new_data["iq"] <- 50
new_data
base_data[1, "iq"]
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
prediction_object
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
input$
iq
help(reactiveValues)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
slider_set
slider_set[1, "var_name"]
slider_set["var_name"][1]
slider_set["var_name"]
slider_set["var_name"][1]
slider_set["var_name"][1][1]
slider_set["var_name"][[1]]
str(slider_set)
as.character(slider_set["var_name"])
slider_set[["var_name"]]
as.character(slider_set[["var_name"]])
as.character(slider_set[["var_name"]])[1]
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(updateSliderInput)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(isolate)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(observe)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(invalidateLater)
help(reactiveUI)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(observeEvent)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(isolate)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
new_data()
new_data()["income"]
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(reactiveValues)
my_reactives <- reactiveValues(slider_set)
my_reactives <- reactiveValues(slier_set = slider_set)
slider_set
my_reactives
isolate(my_reactives$slier_set)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
isolate(my_reactives)
isolate(my_reactives$slider_set)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
isolate(my_reactives)
isolate(my_reactives$slider_input)
isolate(my_reactives$slider_set)
isolate(my_reactives$slider_set$var_mean)
isolate(my_reactives$slider_set$var_mean[1])
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
rm(list = ls())
shiny::runApp('prototype Shiny project')
get_sliders(base_data, outcome_variable, "income")
get_sliders(base_data, outcome_variable, "income")
get_sliders <- function(base_data, outcome_variable, x_axis_selected) {
# make index of variables in the base dataset which are NOT factors
non_factors <- which(!sapply(base_data, is.factor))
# if it was retained, drop the outcome variable from the index
outcome_retained <- grepl(outcome_variable, names(non_factors))
if(any(outcome_retained)) {
non_factors <- non_factors[!outcome_retained]
}
# drop out the x-axis variable from the index
x_axis_variable <- grepl(x_axis_selected, names(non_factors))
fixed_predictors <- non_factors[!x_axis_variable]
# create dataframe with basic values for all predictors that need sliders
slider_set <- c()
for(index in 1:length(fixed_predictors)) {
var_name <- names(fixed_predictors[index])
# get a reasonable range from the base_data object (floor and ceiling
# used to make sure we have round, inclusive numbers)
var_min <- floor(range(with(base_data, get(var_name)))[1])
var_max <- ceiling(range(with(base_data, get(var_name)))[2])
# the starting value defaults to the base data mean (matches the
# initial behavior of the get_new_data function and thus the initial
# new_data object)
var_mean <- mean(with(base_data, get(var_name)))
slider_set <- rbind(slider_set,
data.frame(var_name, var_min, var_max, var_mean)
)
}
# return the dataframe
return(slider_set)
}
get_sliders(base_data, outcome_variable, "income")
get_sliders(base_data, outcome_variable, "age")
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
slider_set
slider_set()
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
input$fixed_predictors
isolate(input$fixed_predictors)
input$income
isolate(input)
isolate(input$names)
names(input)
output
names(output)
output$income
input$income
shiny::runApp('prototype Shiny project')
names(input)
isolate(names(input))
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
new_data
str(new_data)
slider_set
slider_set$var_name
as.character(slider_set$var_name)
grepl(as.character(slider_set$var_name), names(input))
any(grepl(as.character(slider_set$var_name), names(input)))
paste(as.character(slider_set$var_name), sep = "|")
paste(as.character(slider_set[[var_name]]), sep = "|")
grep(as.character(slider_set$var_name), names(input))
grepl(as.character(slider_set$var_name), names(input))
as.character(slider_set$var_name)
test_set <- c("income", "puppies", "iq", "cash")
str(test_set)
grepl(as.character(slider_set$var_name), test_set)
grepl(c(as.character(slider_set$var_name)), test_set)
as.character(slider_set$var_name)
paste0(as.character(slider_set$var_name))
paste(as.character(slider_set$var_name))
paste(as.character(slider_set$var_name))
c(as.character(slider_set$var_name))
as.vector((as.character(slider_set$var_name)))
help(paste)
slider_set$var_name
paste(slider_set$var_name)
paste(slider_set$var_name, sep = "|")
as.character(slider_set$var_name)
unlist(as.character(slider_set$var_name))
paste(unlist(as.character(slider_set$var_name)))
help(eventReactive)
help(eventReactive)
rm(list = ls())
data(gator)
female
"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
c(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
print(female)
help(print)
as.numeric("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0")
strsplit("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0")
strsplit("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", " ")
paste(strsplit("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", " "), sep = ", "
)
test <- strsplit("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", " ")
test
as.numeric(test)
test <- strsplit("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "  ")
test
test <- strsplit("1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", " ")
test[1]
[test[[1]]]
test[[1]]
test[[1]][1]
paste(test[[1]], ",")
as.numeric(test[[1]][1])
as.numeric(test[[1]])
summary(female)
count(female)
table(female)
food
size
data(cars)
cars
data(mtcars)
mtcars
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
help(isoalte)
help(isolate)
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
new_data
new_data["income"]
new_data["income"] <- 2
new_data
input[["x_axis_selected"]]
names(input)
input[['predictor_choice']]
new_data[input[['predictor_choice']]]
rm(list = ls())
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
shiny::runApp('prototype Shiny project')
getwd()
runApp("./prototype Shiny project/", display.mode = "showcase")
options(error = browser)
shiny::runApp('prototype Shiny project')
ls
ls()
options(error = recover)
shiny::runApp('prototype Shiny project')
ls()
help(options)
options(error = NULL)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(reactiveValues)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(input)
isolate(names(input))
slider_set()
isolate(slider_set())
shiny::runApp()
shiny::runApp()
shiny::runApp()
fixed()
isolate(fixed)
isolate(fixed$selected_ci)
help(reactiveValuesToList)
help(reactiveValues)
shiny::runApp()
fixed$x_axis_selected
isolate(fixed$x_axis_selected)
isolate(fixed$x_axis_selected())
shiny::runApp()
shiny::runApp()
shiny::runApp()
x_axis_selected
x_axis_selected()
shiny::runApp()
shiny::runApp()
shiny::runApp()
selected_ci
shiny::runApp()
shiny::runApp()
isolate(fixed$selectec_ci)
isolate(fixed$selected_ci)
isolate(fixed$selected_ci())
shiny::runApp()
output
output()
x_axis_selected()
isolate(x_axis_selected())
isolate(x_axis_selected
)
shiny::runApp()
new_data()
isolate(new_data())
shiny::runApp()
new_data
shiny::runApp()
isolate(slider_set())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
isolate(input$facet_choice)
shiny::runApp()
shiny::runApp()
shiny::runApp()
isolate(slider_set())
shiny::runApp()
isolate(x_axis_selected)
isolate(x_axis_selected())
shiny::runApp()
isolate(x_axis_selected())
shiny::runApp()
shiny::runApp()
new_data_fixed()
isolate(new_data_fixed())
shiny::runApp()
shiny::runApp()
runApp(, display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
new_data_base
shiny::runApp()
new_data_base
shiny::runApp()
new_data_base
shiny::runApp()
input[[current_var]]
shiny::runApp()
input[[current_var]]
new_data_base
new_data_base[current_var]
new_data_base[current_var] <- input[[current_var]]
new_data_base
new_data_base
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
test
new_data_initial
base_data
help(lapply)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cos_options = list()
base_data
names(base_data)
str(base_data)
str(base_data)[1]
str(base_data)[2]
str(base_data)[[1]]
is.factor(base_data)
base_data[is.factor]
shiny::runApp()
help(switch)
x_axis_conversions <- list("Age" = "age", "Income" = "income", "IQ" = "iq")
facet_conversions <- list("None" = NULL, "Sex" = "sex")
x_axis_conversions
x_axis_conversions["Age"]
x_axis_conversions[["Age"]]
facet_conversions[["None"]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(x_axis_options)
x_axis_options <- list("Age",
"Income",
"IQ")
names(x_axis_options)
x_axis_options
unlist(x_axis_options)
x_axis_conversions <- list("Age" = "age",
"Income" = "income",
"IQ" = "iq")
unlist(x_axis_conversions)
names(unlist(x_axis_conversions))
help(radioButtons)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
isolate(x_axis_selected)
isolate(x_axis_selected())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(knit)
help(knit)
library(knitr)
install.packages("knitr")
library(knitr)
help(knit)
knit("../model_only_SSWRish.Rmd")
install.packages("RODBC")
install.packages("pander")
install.packages("psych")
knit("../model_only_SSWRish.Rmd")
install.packages("lubridate")
knit("../model_only_SSWRish.Rmd")
source('~/.active-rstudio-document', echo=TRUE)
